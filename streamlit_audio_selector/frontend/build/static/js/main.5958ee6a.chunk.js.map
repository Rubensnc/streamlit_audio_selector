{"version":3,"sources":["vc/ActorSelector.js","vc/PlayerUI.js","vc/Demo.js","MyComponent.tsx","index.tsx"],"names":["VoiceActor","name","imgSrc","sampleSrc","this","VoiceActorSelector","props","console","log","initialIdx","defaultIdx","state","actors","selected","select","idxOrNull","setState","onSelect","prevProps","prevState","snapshot","i","actor","classes","push","it","key","className","join","onClick","src","alt","React","Component","PlayerUI","audioSliderSrc","waveformSlider","waveformSliderRef","createRef","playing","progress","time","totalTime","trigger","sliderRef","WaveSurfer","create","container","current","waveColor","progressColor","responsive","xhr","cache","mode","load","setMute","on","frac","seek","isPlaying","play","pause","Math","random","initWaveformSlider","updateWaveformSlider","onSeek","seekTo","onPlay","onPause","ref","style","width","Slider","value","max","min","onChange","e","v","aria-label","valueLabelDisplay","IconButton","numSeconds","CircularProgress","VCDemo","audiosRef","audioSrcs","videoSrc","useWaveformSlider","onReady","audios","mediasReady","playerUIRef","videoPlayerRef","selectedTrack","ready","children","audio","Object","getOwnPropertyNames","length","selectTrack","muted","currentTime","duration","idx","volume","audioSrc","extra","updateProgress","target","preload","onCanPlayThrough","markMediaReady","playsInline","type","MyComponent","render","args","map","img_src","sample_src","demo","setTimeout","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5958ee6a.chunk.js","sourcesContent":["import React from 'react';\n\nexport class VoiceActor {\n    constructor(name, imgSrc, sampleSrc=null) {\n        this.name = name\n        this.imgSrc = imgSrc\n        this.sampleSrc = sampleSrc\n    }\n}\n\nexport class VoiceActorSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(\"PROPS\", props)\n        let initialIdx = typeof props.defaultIdx === \"number\" ? props.defaultIdx : null\n        this.state = {\n            actors: props.actors || [],\n            selected: initialIdx,\n        };\n        this.select(initialIdx);\n    }\n\n    select(idxOrNull) {\n        console.log(\"Selecting...\", idxOrNull)\n        if (idxOrNull !== this.state.selected) {\n            this.setState({selected: idxOrNull})\n        }\n        if (this.props.onSelect) {\n            this.props.onSelect(idxOrNull);\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.actors !== prevProps.actors) {\n            this.setState({actors: this.props.actors || []})\n        }\n    }\n\n    render() {\n        let actors = [];\n        let i = 0\n        for (let actor of this.state.actors) {\n            let classes = [\"actor\"]\n            let selected = i === this.state.selected;\n            if (selected) {\n                console.log(\"SELECTED!\", i)\n                classes.push(\"actor--selected\")\n            }\n            let it = i;\n            actors.push(\n                <div key={it}>\n                    <figure className={classes.join(\" \")} onClick={() => {\n                        console.log(\"selecting\", it);\n                        this.select(it)\n                    }}>\n                        <img src={actor.imgSrc} alt={actor.name}/>\n                        <figcaption>{actor.name}</figcaption>\n                    </figure>\n                </div>);\n            i++;\n        }\n        return <div className=\"actor-grid\">\n            {actors}\n        </div>\n    }\n}\n","import React from 'react';\nimport {FormattedTime} from 'react-player-controls'\nimport Slider from '@material-ui/core/Slider';\nimport IconButton from '@material-ui/core/IconButton';\nimport PlayCircleFilled from \"@material-ui/icons/PlayCircleFilled\";\nimport PauseCircleFilled from \"@material-ui/icons/PauseCircleFilled\";\nimport WaveSurfer from 'wavesurfer.js';\nimport {CircularProgress} from \"@material-ui/core\";\n\n\nexport class PlayerUI extends React.Component {\n    constructor(props) {\n        super(props);\n        // OUT events: onPlay, onPause, onSeek\n        // IN events: updateProgress\n\n        this.audioSliderSrc = props.audioSliderSrc\n        this.waveformSlider = null\n        this.waveformSliderRef = React.createRef();\n\n        this.state = {\n            playing: false,\n            progress: 0.0,\n            time: 0.0,\n            totalTime: 0.0,\n            trigger: 0.0,\n        }\n        this.sliderRef = React.createRef();\n    }\n\n    initWaveformSlider() {\n        if (this.waveformSlider) {\n            return\n        }\n        let xhr = { cache: 'default', mode: 'no-cors'};\n        this.waveformSlider = WaveSurfer.create({\n            container: this.waveformSliderRef.current,\n            waveColor: 'violet',\n            progressColor: 'purple',\n            responsive: true,\n            xhr: xhr,\n        });\n        this.waveformSlider.load(this.audioSliderSrc)\n        // Mute entirely, the audio actually plays elsewhere.\n        this.waveformSlider.setMute(true);\n        this.waveformSlider.on(\"seek\", (frac) => {\n            console.log(\"Seeek!\")\n            this.seek(frac, false)\n            // Make sure the state is in sync...\n            if (this.state.playing !== this.waveformSlider.isPlaying()) {\n                console.log(\"Warning waveform slider state not in sync with the player, syncing to playing:\", this.state.playing)\n                if (this.state.playing) {\n                    this.waveformSlider.play()\n                } else {\n                    this.waveformSlider.pause()\n                }\n\n            }\n        })\n        this.setState({trigger: Math.random()})\n\n    }\n\n    componentDidMount() {\n        if (this.audioSliderSrc) {\n            this.initWaveformSlider()\n        }\n\n    }\n\n    updateProgress(time, totalTime) {\n        let frac = time / totalTime;\n        this.setState({progress: frac, time: time, totalTime: totalTime})\n        if (frac >= 1.0 && this.state.playing) {\n            this.pause()\n        }\n    }\n\n    seek(frac, updateWaveformSlider = true) {\n        this.props.onSeek(frac)\n        if (this.waveformSlider && updateWaveformSlider) {\n            this.waveformSlider.seekTo(frac)\n        }\n    }\n\n    play() {\n        if (this.state.progress >= 1.0) {\n            this.seek(0)\n        }\n        this.setState({playing: true})\n        this.props.onPlay()\n        if (this.waveformSlider) {\n            this.waveformSlider.play()\n        }\n    }\n\n    pause() {\n        this.setState({playing: false})\n        this.props.onPause()\n        if (this.waveformSlider) {\n            this.waveformSlider.pause()\n        }\n    }\n\n\n    render() {\n        return <div className=\"player-ui\">\n            {this.audioSliderSrc ?\n                <div className=\"waveform-slider\" ref={this.waveformSliderRef} style={{width: \"100%\"}}/> : null}\n            {this.waveformSlider ? null : <Slider\n                value={Math.max(Math.min(this.state.progress * 100, 100), 0)}\n                onChange={(e, v) => this.seek(v / 100)}\n                aria-label=\"small\"\n                valueLabelDisplay=\"off\"\n\n            />}\n            <br/>\n            {this.state.totalTime > 0 ?\n                <span className=\"player-controls\">\n                    <IconButton onClick={() => {\n                        if (this.state.playing) {\n                            this.pause()\n                        } else {\n                            this.play()\n                        }\n                    }}> {!this.state.playing ? <PlayCircleFilled className=\"player-button\"/> :\n                        <PauseCircleFilled className=\"player-button\"/>} </IconButton>\n                <div className=\"player-time\"><FormattedTime numSeconds={this.state.time}/> / <FormattedTime\n                    numSeconds={this.state.totalTime}/> </div>\n            </span> :\n                <CircularProgress/>\n            }\n        </div>\n    }\n}\n","import React from 'react';\nimport {VoiceActorSelector} from \"./ActorSelector\";\nimport {PlayerUI} from \"./PlayerUI\";\n\n\n// <VCDemo audioSrcs={[\n//     \"/vc/samples/potter_long_converted_original.mp3\",\n//     \"/vc/samples/potter_long_converted_david.mp3\",\n//     \"/vc/samples/potter_long_converted_hilary.mp3\",\n//     \"/vc/samples/potter_long_converted_obama.mp3\",\n// ]} actors={[new VoiceActor(\"Original\", \"/actors/obama.jpg\"),\n//     new VoiceActor(\"David\", \"/actors/obama.jpg\"),\n//     new VoiceActor(\"Hilary\", \"/actors/obama.jpg\"),\n//     new VoiceActor(\"Obama\", \"/actors/obama.jpg\")]}\n//         useWaveformSlider={true} videoSrc={null}\n// />\n\nexport class VCDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.audiosRef = React.createRef();\n        this.audioSrcs = props.audioSrcs\n        this.videoSrc =  props.videoSrc\n        this.useWaveformSlider = !!props.useWaveformSlider\n        this.onReady = props.onReady\n        // if (this.videoSrc && !this.videoSrc.endsWith(\".mp4\")) {\n        //     throw Error(\"videoSrc must be an mp4 file.\")\n        // }\n        this.audios = [];\n        this.mediasReady = {}\n        this.playerUIRef = React.createRef();\n        this.videoPlayerRef = React.createRef();\n\n\n        this.selectedTrack = 0;\n\n        this.state = {\n            ready: false,\n            actors: this.props.actors\n        }\n\n    }\n\n    componentDidMount() {\n        this.audios = [];\n        for (let audio of this.audiosRef.current.children) {\n            console.log(audio)\n            this.audios.push(audio)\n        }\n    }\n\n    markMediaReady(i) {\n        this.mediasReady[i] = true\n        console.log(\"Audio ready:\", i)\n        if (Object.getOwnPropertyNames(this.mediasReady).length === (this.audioSrcs.length + (this.videoSrc ? 1 : 0))) {\n            this.setState({ready: true})\n            this.selectTrack(this.selectedTrack)\n            if (this.onReady) {\n                this.onReady()\n            }\n        }\n    }\n\n    play() {\n        for (let audio of this.audios) {\n            console.log('play')\n            audio.play()\n        }\n        if (this.videoPlayerRef.current) {\n            this.videoPlayerRef.current.muted = true;\n            this.videoPlayerRef.current.play()\n        }\n    }\n\n    pause() {\n        for (let audio of this.audios) {\n            console.log('pause')\n            audio.pause()\n        }\n        if (this.videoPlayerRef.current) {\n            this.videoPlayerRef.current.pause()\n        }\n        if (this.audios.length > 0) {\n            // Sync all the media to the first one, just in case they go out of sync.\n            this.seek(this.audios[0].currentTime / this.audios[0].duration)\n        }\n\n\n    }\n\n    seek(frac) {\n        if (this.audios.length <= 0) {\n            return\n        }\n        frac = Math.min(Math.max(frac, 0), 1)\n        let currentTime = frac * this.audios[0].duration;\n        for (let audio of this.audios) {\n            console.log('seek')\n            audio.currentTime = currentTime\n        }\n        if (this.videoPlayerRef.current) {\n            this.videoPlayerRef.current.currentTime = currentTime\n        }\n    }\n\n    selectTrack(i) {\n        console.log(\"selected track\", i)\n        this.selectedTrack = i;\n        let idx = 0;\n        for (let audio of this.audios) {\n            audio.muted = idx !== this.selectedTrack;\n            console.log(audio.volume)\n            idx++;\n        }\n\n    }\n\n    render() {\n        let audios = [];\n        for (let audioSrc of this.audioSrcs) {\n            let extra = {}\n            if (audios.length === 0) {\n                extra[\"onTimeUpdate\"] = (e) => this.playerUIRef.current.updateProgress(e.target.currentTime, e.target.duration)\n                extra[\"onDurationChange\"] = (e) => this.playerUIRef.current.updateProgress(e.target.currentTime, e.target.duration)\n                extra[\"onEnded\"] = (e) => this.playerUIRef.current.updateProgress(e.target.currentTime, e.target.duration)\n            }\n            audios.push(\n                <audio src={audioSrc} preload=\"auto\" onCanPlayThrough={() => {\n                    this.markMediaReady(audioSrc)\n                }} key={audioSrc} {...extra}/>);\n        }\n        return (<div className=\"vcdemo\">\n            <br/>\n            {this.videoSrc ? <video src={this.videoSrc} playsInline muted preload=\"auto\" type=\"video/mp4\" ref={this.videoPlayerRef} onCanPlayThrough={() => this.markMediaReady(\"video\")}/> : null}\n            <PlayerUI onSeek={(frac) => {\n                this.seek(frac)\n            }} onPlay={() => {\n                this.play()\n            }} onPause={() => {\n                this.pause()\n            }} ref={this.playerUIRef} audioSliderSrc={this.useWaveformSlider ? this.audioSrcs[0] : null}/>\n            <br/>\n            <VoiceActorSelector actors={this.state.actors} defaultIdx={0}\n                                onSelect={(idx) => {\n                                    this.selectTrack(idx)\n                                }}/>\n            <div ref={this.audiosRef}>\n                {audios}\n            </div>\n        </div>)\n    }\n}\n\n\n","import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, {ReactNode} from \"react\"\nimport {VCDemo} from \"./vc/Demo.js\"\nimport {VoiceActor} from \"./vc/ActorSelector\";\nimport \"./vc/Styles.css\"\n\ninterface State {\n    ready: Boolean\n}\n\n// <VCDemo audioSrcs={[\n//     \"/vc/samples/potter_long_converted_original.mp3\",\n//     \"/vc/samples/potter_long_converted_david.mp3\",\n//     \"/vc/samples/potter_long_converted_hilary.mp3\",\n//     \"/vc/samples/potter_long_converted_obama.mp3\",\n// ]} actors={[new VoiceActor(\"Original\", \"/actors/obama.jpg\"),\n//     new VoiceActor(\"David\", \"/actors/obama.jpg\"),\n//     new VoiceActor(\"Hilary\", \"/actors/obama.jpg\"),\n//     new VoiceActor(\"Obama\", \"/actors/obama.jpg\")]}\n//         useWaveformSlider={true} videoSrc={null}\n// />\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n    public state = {ready: false}\n\n    public componentDidMount() {\n        super.componentDidMount();\n        // setTimeout(()=>Streamlit.setComponentValue(1), 100)\n    }\n\n    public render = (): ReactNode => {\n        // Arguments that are passed to the plugin in Python are accessible\n        // via `this.props.args`. Here, we access the \"name\" arg.\n        const actors = this.props.args[\"actors\"].map((e: any) => new VoiceActor(e.name, e.img_src, e.sample_src));\n        const audioSrcs = this.props.args[\"audio_srcs\"];\n        const videoSrc = this.props.args[\"video_src\"];\n        const useWaveformSlider = this.props.args[\"use_wavesurfer_slider\"];\n\n        const demo = <VCDemo audioSrcs={audioSrcs}\n                             actors={actors}\n                             onReady={() => {\n                                 if (!this.state.ready) {\n                                     console.log(\"Ready!!!!\")\n                                     this.setState({ready: true})\n                                     setTimeout(() => Streamlit.setComponentValue(1), 300)\n                                 }\n                             }}\n\n                             useWaveformSlider={useWaveformSlider}\n                             videoSrc={videoSrc}\n        />;\n        return (\n            // @ts-ignore\n            <center>{demo}</center>\n        )\n    }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}